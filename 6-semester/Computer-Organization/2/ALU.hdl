// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        // Se utiliza a = a la entrada y n = 0000... puesto que en caso de que zx o zy sean positivos, va a convertir la entrada en 0s
        Mux16(a=x, b=false, sel=zx, out=x0);
        Mux16(a=y, b=false, sel=zy, out=y0);

        // Obtenemos el negado de lo que zx y zy nos provee, para que en caso de nx o ny sea positivo, hacer que la entrada sea ese nuevo valor
        Neg16(in=x0, out=xn);
        Neg16(in=y0, out=yn);

        // verifico si nx o ny es positivo para hacer el respectivo cambio a lo que nos pasó zx o zy
        Mux16(a=x0, b=xn, sel=nx, out=x1);
        Mux16(a=y0, b=yn, sel=ny, out=y1);

        // x1,y1 son nuestros valores actuales, pase lo que pase con zx, zy, nx, ny. Ahora debemos aplicar f, que nos dirá si hacemos una suma o un and
        // Por lo tanto, hacemos el calculo del and entre x1 y y1, y el caludo de la suma, para posteriormente según el selector arrojar el resultado correspondiente
        And16(a=x1, b=y1, out=andOut);
        Add16(a=x1, b=y1, out=addOut);
        Mux16(a=andOut, b=addOut, sel=f, out=out1);

        // ahora, segun lo que obtenemos de la operacion con el bit de control f, el cual llamamos out1, vamos a obtener su valor negado, para posteriormente
        // con el mux verificar si no es 1, negar ese out1, y en caso de ser 0, dejarlo como está
        Neg16(in=out1, out=notOut);
        Mux16(a=out1, b=notOut, sel=no, out=outf);
        
        // Verfico si la salida es negativa, para prender la flag de ng
        Sign(in=outf, out=ng);

        // Verifico si la salida son 0s para prender la flag de zr
        Or16Way(in=outf, out=orOut);
        Not(in=orOut, out=zr);

        // saco el resultado obtenido por la ALU
        And16(a=outf, b=true, out=out);
}